"""
app.py

A minimal Flask application demonstrating the use of itsdangerous for token
generation and validation.
"""

from itsdangerous import URLSafeTimedSerializer as Serializer, BadSignature, SignatureExpired

SECRET_KEY = "supersecret"

def create_token(data):
    """
    Generate a time-limited JSON Web token from a given dictionary.

    Args:
        data (dict): A dictionary of data to encode into the token.

    Returns:
        str: A string representing the encoded token that expires in 60 seconds.

    Example:
        >>> create_token({"user": "alice"})
        'eyJ1c2VyIjoiYWxpY2UifQ.some_timestamp.signature'
    """
    s = Serializer(SECRET_KEY)
    return s.dumps(data)

def verify_token(token):
    """
    Decode and validate a time-limited JSON Web token.

    Args:
        token (str): The token string to decode.

    Returns:
        dict: The original data encoded in the token if valid.

    Raises:
        itsdangerous.BadSignature: If the token is invalid or has been tampered with.
        itsdangerous.SignatureExpired: If the token has expired.

    Example:
        >>> verify_token('eyJ1c2VyIjoiYWxpY2UifQ.some_timestamp.signature')
        {'user': 'alice'}
    """
    s = Serializer(SECRET_KEY)
    try:
        return s.loads(token, max_age=60)
    except (BadSignature, SignatureExpired) as e:
        # Re-raise the exception to be handled by the caller
        raise e
